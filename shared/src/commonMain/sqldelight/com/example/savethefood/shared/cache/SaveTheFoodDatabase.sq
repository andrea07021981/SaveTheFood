import com.example.savethefood.shared.utils.FoodImage;
import com.example.savethefood.shared.utils.QuantityType;
import com.example.savethefood.shared.utils.StorageType;

CREATE TABLE IF NOT EXISTS Food (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    title TEXT NOT NULL,
    description TEXT,
    img TEXT AS FoodImage NOT NULL,
    price REAL,
    quantityType TEXT AS QuantityType NOT NULL,
    quantity REAL,
    storageType TEXT AS StorageType NOT NULL,
    bestBefore INTEGER NOT NULL,
    lastUpdate INTEGER NOT NULL
);

removeAllFood:
DELETE FROM Food;

insertFood:
INSERT OR REPLACE INTO Food (id, title, description, img, price, quantityType, quantity, storageType, bestBefore, lastUpdate)
VALUES (nullif(?, 0),?,?,?,?,?,?,?,?,?);

selectFoods:
SELECT * FROM Food;

selectFoodById:
SELECT * FROM Food
WHERE id = ?;

updateFood:
UPDATE OR ABORT Food
SET
    id = ?,
    title = ?,
    description = ?,
    img = ?,
    price = ?,
    quantityType = ?,
    quantity = ?,
    storageType = ?,
    bestBefore = ?,
    lastUpdate = ?
WHERE
    id = ?;

deleteFoodById:
DELETE FROM Food WHERE id = ?;

lastInsertRowId:
SELECT last_insert_rowid()
;

changes:
SELECT changes();

CREATE TABLE IF NOT EXISTS User (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    username TEXT NOT NULL, 
    email TEXT NOT NULL, 
    password TEXT NOT NULL
);

removeAllUsers:
DELETE FROM User;

insertUser:
INSERT OR REPLACE INTO User (username,email,password)
VALUES (?,?,?);

updateUser:
UPDATE OR ABORT User
SET id = ?,username = ?,email = ?,password = ?
WHERE id = ?;

selectUsereById:
SELECT * FROM Food
WHERE id = ?;

selectUserByEmailPsw:
SELECT * FROM User 
WHERE email = ? AND password = ?;


CREATE TABLE IF NOT EXISTS RecipeIngredients (
    recipeId INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    id INTEGER NOT NULL,
    title TEXT NOT NULL,
    image TEXT NOT NULL,
    imageType TEXT NOT NULL,
    likes INTEGER NOT NULL,
    missedIngredientCount INTEGER NOT NULL,
    usedIngredientCount INTEGER NOT NULL,
    unUsedIngredientCount INTEGER NOT NULL
);

removeAllRecipes:
DELETE FROM  RecipeIngredients;

insertRecipe:
INSERT OR REPLACE INTO RecipeIngredients (recipeId,id,title,image,imageType,likes,missedIngredientCount,usedIngredientCount,unUsedIngredientCount)
VALUES (nullif(?, 0),?,?,?,?,?,?,?,?);

deleteRecipeById:
DELETE FROM RecipeIngredients WHERE recipeId = ?;

selectRecipes:
SELECT * FROM RecipeIngredients;

selectRecipeById:
SELECT * FROM RecipeIngredients WHERE id = ?;

CREATE TABLE IF NOT EXISTS Bag (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    title TEXT NOT NULL,
    img TEXT AS FoodImage NOT NULL,
    quantityType TEXT AS QuantityType NOT NULL,
    quantity REAL
);

deleteAllBags:
DELETE FROM Bag;

insertBag:
INSERT OR REPLACE INTO Bag (id,title,img,quantityType,quantity)
VALUES (nullif(?, 0),?,?,?,?);

selectBags:
SELECT * FROM Bag;
